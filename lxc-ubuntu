#!/bin/bash
#
# Creates a ubuntu based container
#
# This script is based on the lxc-ubuntu example script that ships with lxc.
#
# Copyright (C) 2010 Nigel McNie
# Modified for Ubuntu 2010 phbaer
# Modified some more 2011 David Schoen
#

conffile="lxc.conf"
mntfile=
tmpmntfile=
utsname=
mtu="1500"
debmirror=http://archive.ubuntu.com/ubuntu
fqdn=$(hostname --fqdn)


################################################################################
#                    ubuntu custom configuration files
################################################################################

# Disable selinux in the container
write_ubuntu_selinux() {
    mkdir -p $rootfs/selinux
    echo 0 > $rootfs/selinux/enforce
}

# Write out a custom fstab
write_ubuntu_fstab() {
cat <<EOF > $rootfs/etc/fstab
tmpfs  /dev/shm   tmpfs  defaults  0 0
EOF
}

# Write out network config (dhcp)
write_ubuntu_network() {
cat <<EOF > $rootfs/etc/network/interfaces
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
EOF
cat <<EOF >> $rootfs/etc/dhcp3/dhclient.conf
send host-name "$utsname";
EOF
}

# Set the hostname for the container
write_ubuntu_hostname() {
cat <<EOF > $rootfs/etc/hostname
$utsname
EOF
cat <<EOF > $rootfs/etc/hosts
127.0.0.1   $utsname localhost

# The following lines are desirable for IPv6 capable hosts
::1     localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts
EOF
}

# Writes a custom ssh config that allows root logins
write_ubuntu_sshd_config() {
cat <<EOF > $rootfs/etc/ssh/sshd_config
Port 22
Protocol 2
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_dsa_key
UsePrivilegeSeparation yes
KeyRegenerationInterval 3600
ServerKeyBits 768
SyslogFacility AUTH
LogLevel INFO
LoginGraceTime 120
PermitRootLogin yes
StrictModes yes
RSAAuthentication yes
PubkeyAuthentication yes
IgnoreRhosts yes
RhostsRSAAuthentication no
HostbasedAuthentication no
PermitEmptyPasswords yes
ChallengeResponseAuthentication no
EOF
}

# Autoconfigures packages in the container so no debconf questions are asked
# when it's made
reconfigure_ubuntu_packages() {
    default_environment_locale=$(debconf-show locales | grep default_environment_locale | cut -f 2 -d :)
    locales_to_be_generated=$(debconf-show locales | grep locales_to_be_generated | cut -f 2 -d :)
    tzdata_area=$(debconf-show tzdata | grep Areas | cut -f 2 -d :)
    tzdata_zone=$(debconf-show tzdata | grep Zones/${tzdata_area:1} | cut -f 2 -d :)

    cat <<EOF | chroot $rootfs sh
#!/bin/sh
apt-get install --force-yes -y language-pack-en
update-locale LANG="en_GB.UTF-8" LANGUAGE="en_GB.UTF-8" LC_ALL="en_GB.UTF-8"
EOF
}

disable_upstart_mounts() {
    cat <<EOF > $rootfs/lib/init/fstab
#
# These are the filesystems that are always mounted on boot, you can
# override any of these by copying the appropriate line from this file into
# /etc/fstab and tweaking it as you see fit.  See fstab(5).
#
# <file system> <mount point>             <type>          <options>                    <dump> <pass>
/dev/root       /                         rootfs          defaults                          0 1
#none            /proc                     proc            nodev,noexec,nosuid               0 0
none            /proc/sys/fs/binfmt_misc  binfmt_misc     nodev,noexec,nosuid,optional      0 0
#none            /sys                      sysfs           nodev,noexec,nosuid               0 0
none            /sys/fs/fuse/connections  fusectl         optional                          0 0
none            /sys/kernel/debug         debugfs         optional                          0 0
none            /sys/kernel/security      securityfs      optional                          0 0
none            /spu                      spufs           gid=spu,optional                  0 0
#none            /dev                      devtmpfs,tmpfs  mode=0755                         0 0
none            /dev/pts                  devpts          noexec,nosuid,gid=tty,mode=0620   0 0
none            /dev/shm                  tmpfs           nosuid,nodev                      0 0
none            /tmp                      none            defaults                          0 0
none            /var/run                  tmpfs           mode=0755,nosuid,showthrough      0 0
none            /var/lock                 tmpfs           nodev,noexec,nosuid,showthrough   0 0
none            /lib/init/rw              tmpfs           mode=0755,nosuid,optional         0 0
EOF
}

modify_upstart_sysinit() {
    sed -i 's/start on filesystem and net-device-up IFACE=lo/start on filesystem #and net-device-up IFACE=lo/' $rootfs/etc/init/rc-sysinit.conf
}

write_upstart_lxc() {
    cat <<EOF > $rootfs/etc/init/lxc.conf
# LXC – Fix init sequence to have LXC containers boot with upstart

# description “Fix LXC container - Lucid”

start on startup

task
pre-start script
mount -t proc proc /proc
mount -t devpts devpts /dev/pts
mount -t sysfs sys /sys
mount -t tmpfs varrun /var/run
mount -t tmpfs varlock /var/lock
mkdir -p /var/run/network
touch /var/run/utmp
chmod 664 /var/run/utmp
chown root.utmp /var/run/utmp
if [ "$(find /etc/network/ -name upstart -type f)" ]; then
chmod -x /etc/network/*/upstart || true
fi
end script

script
start networking
initctl emit filesystem --no-wait
initctl emit local-filesystems --no-wait
initctl emit virtual-filesystems --no-wait
init 2
end script
EOF
mkdir -p $rootfs/var/run/network
touch $rootfs/var/run/network/ifstate
mkdir -p $rootfs/var/run/sshd
}

# Disables services a container doesn't need
disable_ubuntu_services() {
    chroot $rootfs /usr/sbin/update-rc.d -f umountfs remove
    chroot $rootfs /usr/sbin/update-rc.d -f hwclock.sh remove
    chroot $rootfs /usr/sbin/update-rc.d -f hwclockfirst.sh remove
}


################################################################################
#                        lxc configuration files
################################################################################

write_lxc_configuration() {
cat <<EOF > $conffile
lxc.utsname = $utsname
lxc.tty = 6
lxc.pts = 1024
lxc.network.type = veth
lxc.network.flags = up
lxc.network.link = br0
lxc.network.name = eth0
lxc.network.mtu = $mtu
lxc.rootfs = $rootfs
#lxc.mount = $tmpmntfile
lxc.cgroup.devices.deny = a
# /dev/null and zero
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
# consoles
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm
# /dev/{,u}random
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
# rtc
lxc.cgroup.devices.allow = c 254:0 rwm
EOF
}

write_lxc_mounts() {

    tmpmntfile=$(mktemp lxc.XXXXXXXXXX)

    if [ ! -z "$mntfile" ]; then
    cp $mntfile $tmpmntfile
    fi
}


collect_information() {

    # choose a hostname, default is the container name
    echo -n "What hostname do you wish for this container ? [$name] "
    read _utsname_

    if [ ! -z "$_utsname_" ]; then
        utsname=$_utsname_
    else
        utsname=$name
    fi

    echo -n "Specify the location for an extra fstab file [(none)] "
    read _mntfile_

    if [ ! -z "$_mntfile_" ]; then
        mntfile=$_mntfile_
    fi
}

install_ubuntu()
{
    arch=$(dpkg --print-architecture)
    case $arch in
        amd64) arch=amd64 ;;
        i386 ) arch=i386 ;;
        *    ) echo "Unsupported architecture $arch!"; exit 1; ;;
    esac

    echo "Choose the architecture for the container (choices as for deboostrap, e.g.: amd64, i386"
    echo -n "Choice ? [$arch] "
    read _arch_

    if [ ! -z "$_arch_" ]; then
        arch=$_arch_
    fi

    # choose a mirror
    echo -n "Specify the ubuntu mirror to use to download the rootfs [$debmirror] "
    read _debmirror_

    if [ ! -z "$_debmirror_" ]; then
        debmirror=$_debmirror_
    fi

    # download a mini ubuntu into a cache
    echo "Downloading ubuntu minimal ..."
    debootstrap --verbose --variant=minbase --arch=$arch \
        --include ifupdown,locales,netbase,net-tools,iproute,openssh-server,dhcp3-client,gpgv,adduser,apt-utils,vim,openssh-blacklist,openssh-blacklist-extra,console-setup,sudo,iputils-ping,aptitude,ubuntu-minimal \
        lucid $rootfs $debmirror

    resULT=$?
    if [ "$resULT" != "0" ]; then
        echo "Failed to download the rootfs, aborting."
        exit 1
    fi

}

run_pre_create_hook() {
    # source a hook that's run before the container is created
    # sourced so it has access to our variables, like $name
    test -x /etc/lxc-ubuntu/host-pre-create && . /etc/lxc-ubuntu/host-pre-create
}

run_post_create_hooks() {
    # source host and guest hooks for after the container is created
    test -x /etc/lxc-ubuntu/host-post-create && . /etc/lxc-ubuntu/host-post-create

    if [ -x /etc/lxc-ubuntu/guest-post-create ]; then
        cp /etc/lxc-ubuntu/guest-post-create $rootfs/guest-post-create
        chroot $rootfs /bin/bash /guest-post-create
        chroot $rootfs /bin/rm /guest-post-create
    fi
}

create() {

    collect_information
    write_lxc_mounts
    write_lxc_configuration

    /usr/bin/lxc-create -n $name -f $conffile
    res=$?

    # remove the configuration files
    rm -f $conffile
    rm -f $tmpmntfile

    if [ "$res" != "0" ]; then
        echo "Failed to create '$name'"
        exit 1
    fi

    mkdir -p $rootfs
    mount /dev/vg0/lxc-$name $rootfs
    res=$?

    if [ "$res" != "0" ]; then
        echo "Failed to mount /dev/vg0/lxc-$name"
        lxc-destroy -n $name
        exit 1
    fi

    install_ubuntu
    write_ubuntu_hostname
    write_ubuntu_fstab
    write_ubuntu_network
    write_ubuntu_sshd_config
    write_ubuntu_selinux
    reconfigure_ubuntu_packages
    disable_ubuntu_services
    run_pre_create_hook
    run_post_create_hooks
    disable_upstart_mounts
    modify_upstart_sysinit
    write_upstart_lxc
 

    echo "Done."
    echo -e "\nYou can run your container with the 'lxc-start -n $name'\n"
}

destroy() {

    echo -n "This will PERMANENTLY DESTROY the container $name. Are you sure? [y/N] ? "
    read
    if [ "$reply" != "y" ]; then
        echo "Abort."
        exit
    fi

    halt=$(which lxc-halt)
    if lxc-info -n $name | grep RUNNING > /dev/null; then
        if [ -n "$halt" ]; then
            lxc-halt -n $name
        else
            lxc-stop -n $name
        fi
    fi
    sleep .5

    rm -rf $rootfs
    /usr/bin/lxc-destroy -n $name
    RETVAL=$?
    if [ ! $RETVAL -eq 0 ]; then
        echo "Failed to destroyed '$name'"
        return $RETVAL
    fi

    return 0
}

usage() {
    echo "Usage: $0 <command> <options>"
    echo
    echo "Example: $0 create -n ubuntu"
    echo 
    echo "This script is a helper to create ubuntu system containers."
    echo 
    echo "The script will create the container configuration file following"
    echo "the informations submitted interactively with 'lxc-ubuntu create'"
    echo
    echo "Command:"
    echo "  create: Create a new lxc"
    echo "  destroy: Destroy an existing lxc" 
    echo
    echo "Options:"
    echo "  -n|--name <name>: name of lxc"
    echo "  -h|-help|--help: display this helpful message"
    echo 
    echo "Have fun :)"
}

# Main program

if [ $# = 0 ]; then
    usage 1
fi

if [ "$(id -u)" != "0" ]; then
    echo "This script should be run as 'root'"
    exit 1
fi

name=""
command=""

# parse cli args
while true; do
    [[ -z $1 ]] && break

    case "$1" in
        -h|-help|--help) 
            usage
            exit 0
            ;;
        -n|--name)
            name="$2"
            shift # remove name from remaining arguments
            ;;
        create|destroy)
            command="$1"
            ;;
        *)
            echo "ERROR: Unknown argument $0"
            echo
            usage
            exit 1
            ;;
    esac

    shift
done

if [ -z "$name" ]; then
    echo "ERROR: missing container name, use -n option"
    echo
    usage
    exit 1
fi

conffile="/var/lib/lxc/$name.conf"
rootfs="/var/lib/lxc/$name/rootfs"

case "$command" in
    create)   create;;
    destroy)  destroy;;
    *)        usage;;
esac

# vim: et sw=4 ts=4
